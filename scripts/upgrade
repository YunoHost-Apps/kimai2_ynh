#!/bin/bash

#=================================================
# GENERIC START
#=================================================
# IMPORT GENERIC HELPERS
#=================================================

source _common.sh
source ynh_composer__3
source /usr/share/yunohost/helpers

#=================================================
# LOAD SETTINGS
#=================================================
ynh_script_progression --message="Loading installation settings..."

app=$YNH_APP_INSTANCE_NAME

domain=$(ynh_app_setting_get       --app=$app --key=domain)
path_url=$(ynh_app_setting_get     --app=$app --key=path)
admin=$(ynh_app_setting_get        --app=$app --key=admin)
is_public=$(ynh_app_setting_get    --app=$app --key=is_public)
final_path=$(ynh_app_setting_get   --app=$app --key=final_path)
registration=$(ynh_app_setting_get --app=$app --key=registration)
random_key=$(ynh_app_setting_get   --app=$app --key=random_key)

#=================================================
# CHECK VERSION
#=================================================
ynh_script_progression --message="Checking version..."

upgrade_type=$(ynh_check_app_version_changed)

#=================================================
# ENSURE DOWNWARD COMPATIBILITY
#=================================================
ynh_script_progression --message="Ensuring downward compatibility..."

# Fix is_public as a boolean value
if [ "$is_public" = "Yes" ]; then
	ynh_app_setting_set --app=$app --key=is_public --value=1
	is_public=1
elif [ "$is_public" = "No" ]; then
	ynh_app_setting_set --app=$app --key=is_public --value=0
	is_public=0
fi

# If final_path doesn't exist, create it
if [ -z "$final_path" ]; then
	final_path=/var/www/$app
	ynh_app_setting_set --app=$app --key=final_path --value=$final_path
fi

#=================================================
# BACKUP BEFORE UPGRADE THEN ACTIVE TRAP
#=================================================
ynh_script_progression --message="Backing up the app before upgrading (may take a while)..."

# Backup the current version of the app
ynh_backup_before_upgrade
ynh_clean_setup () {
	# restore it if the upgrade fails
	ynh_restore_upgradebackup
}
# Exit if an error occurs during the execution of the script
ynh_abort_if_errors

#=================================================
# STANDARD UPGRADE STEPS
#=================================================
# DOWNLOAD, CHECK AND UNPACK SOURCE
#=================================================
latest_tag=$(curl -s https://api.github.com/repos/kevinpapst/kimai2/releases/latest | grep 'tag_name' | cut -d\" -f4)
if [ "$upgrade_type" == "UPGRADE_APP" ]
then
  if [ `cd $final_path && git rev-parse --is-inside-work-tree` ]; then
	  pushd "$final_path"
        git fetch --tags
        git checkout $latest_tag
      popd
  else
	ynh_script_progression --message="Upgrading source files..."
	
	# Create a temporary directory and backup config
	tmpdir="$(mktemp -d)"
	if [ -f $final_path/config/packages/local.yaml ]; then
		cp -af "$final_path/config/packages/local.yaml" "$tmpdir/."
	fi
	if [ -d $final_path/var/invoices ]; then
		cp -af "$final_path/var/invoices" "$tmpdir/."
	fi
	if [ -d $final_path/var/data ]; then
		cp -af "$final_path/var/data" "$tmpdir/."
	fi
	
	ynh_secure_remove --file="$final_path"
	
	# Download, check integrity, uncompress and patch the source from app.src
	ynh_setup_source --dest_dir="$final_path"
	
	# Restore config
	if [ -f $tmpdir/local.yaml ]; then
		cp -af "$tmpdir/local.yaml" "$final_path/config/packages/."
	fi
	if [ -d $tmpdir/invoices ]; then
		cp -af "$tmpdir/invoices" "$final_path/var/."
	fi
	if [ -d $tmpdir/data ]; then
		cp -af "$tmpdir/data" "$final_path/var/."
	fi
	
	ynh_secure_remove --file="$tmpdir"
 fi
fi


#=================================================
# NGINX CONFIGURATION
#=================================================
ynh_script_progression --message="Upgrading nginx web server configuration..."

# Create a dedicated nginx config
ynh_add_nginx_config

#=================================================
# UPGRADE DEPENDENCIES
#=================================================
ynh_script_progression --message="Upgrading dependencies..."

ynh_install_app_dependencies $pkg_dependencies

#=================================================
# CREATE DEDICATED USER
#=================================================
ynh_script_progression --message="Making sure dedicated system user exists..."

# Create a dedicated user (if not existing)
ynh_system_user_create --username=$app

#=================================================
# PHP-FPM CONFIGURATION
#=================================================
ynh_script_progression --message="Upgrading php-fpm configuration..."

# Create a dedicated php-fpm config
ynh_add_fpm_config --usage=low --footprint=low --package="$extra_php_dependencies"

#=================================================
# SPECIFIC UPGRADE
#=================================================
# CONFIGURE KIMAI2
#=================================================
ynh_script_progression --message="Configuring Kimai2..."

local_conf="$final_path/config/packages/local.yaml"
ynh_backup_if_checksum_is_different --file="$local_conf"
cp ../conf/local.yaml $local_conf
ynh_replace_string  --match_string="__APP__" --replace_string="$app" --target_file="$local_conf"
if [ $registration -eq 1  ]
then
	ynh_replace_string  --match_string="__REGISTRATION__" --replace_string="true" --target_file="$local_conf"
else
	ynh_replace_string  --match_string="__REGISTRATION__" --replace_string="false" --target_file="$local_conf"
fi
ynh_store_file_checksum --file="$local_conf"

env_conf=$final_path/.env
ynh_backup_if_checksum_is_different --file="$env_conf"
# Configure environement

# setup application config
	
cp ../conf/.env.mysql $env_conf

db_pwd=$(ynh_app_setting_get --app=$app --key=mysqlpwd)
db_name=$(ynh_app_setting_get --app=$app --key=db_name)
db_user=$db_name	
ynh_replace_string --match_string="__RANDOM_KEY__" --replace_string="$random_key" --target_file="$env_conf"
ynh_replace_string --match_string="__DOMAIN__" --replace_string="$domain" --target_file="$env_conf"
ynh_replace_string --match_string="__DB_PASSWORD__" --replace_string="$db_pwd" --target_file="$env_conf"
ynh_replace_string --match_string="__DB_USER__" --replace_string="$db_name" --target_file="$env_conf"
ynh_replace_string --match_string="__DB_NAME__" --replace_string="$db_name" --target_file="$env_conf"

ynh_store_file_checksum --file="$env_conf"

#=================================================
# UPGRADE KIMAI2
#=================================================
ynh_script_progression --message="Upgrading Kimai2..."

ynh_install_composer --phpversion="${YNH_PHP_VERSION}" --workdir="$final_path" --install_args="--optimize-autoloader"
ynh_composer_exec --phpversion="${YNH_PHP_VERSION}" --workdir="$final_path" --commands="require laminas/laminas-ldap"

pushd "$final_path"
	php${YNH_PHP_VERSION} bin/console kimai:update -n
popd

#=================================================
# GENERIC FINALIZATION
#=================================================
# SECURE FILES AND DIRECTORIES
#=================================================
ynh_script_progression --message="Securing files and directories..."

# Set permissions on app files
chown -R $app: $final_path

#=================================================
# SETUP SSOWAT
#=================================================
ynh_script_progression --message="Upgrading SSOwat configuration..."

if ! ynh_permission_exists --permission="teamlead"
then
	ynh_permission_create --permission="teamlead"
fi

if ! ynh_permission_exists --permission="admin"
then
	ynh_permission_create --permission="admin"
fi

if ! ynh_permission_exists --permission="super_admin"
then
	ynh_permission_create --permission="super_admin" --allowed "$admin"
fi

# Make app public if necessary
if [ $is_public -eq 1 ]
then
	# unprotected_uris allows SSO credentials to be passed anyway.
	ynh_permission_update --permission "main" --add "visitors"
fi

#=================================================
# RELOAD NGINX
#=================================================
ynh_script_progression --message="Reloading nginx web server..."

ynh_systemd_action --service_name=nginx --action=reload

#=================================================
# END OF SCRIPT
#=================================================

ynh_script_progression --message="Upgrade of $app completed"
